/* Gramatica.java */
/* Generated By:JavaCC: Do not edit this line. Gramatica.java */
package org.example;

public class Gramatica implements GramaticaConstants {
    public static void main(String[] args) throws ParseException {
        Gramatica parser = new Gramatica(System.in);
        TokenAsignaciones.SetTables();
        parser.Inicio();  // Llamada al método 'inicio()' generado
    }

  final public void Inicio() throws ParseException {
logProduccion("Inicio");
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case BOOLEANO:
      case CARACTER:
      case CLASE:
      case HACER:
      case DOBLE:
      case PARA:
      case SI:
      case ENTERO:
      case PRIVADO:
      case PROTEGIDO:
      case PUBLICO:
      case IMPRIMIR:
      case ESTATICO:
      case CADENA:
      case MIENTRAS:
      case SWITCH:
      case LLAVE_IZQ:
      case IDENTIFICADOR:{
        ;
        break;
        }
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case CLASE:
      case PRIVADO:
      case PROTEGIDO:
      case PUBLICO:
      case ESTATICO:{
        Clase();
        break;
        }
      case BOOLEANO:
      case CARACTER:
      case HACER:
      case DOBLE:
      case PARA:
      case SI:
      case ENTERO:
      case IMPRIMIR:
      case CADENA:
      case MIENTRAS:
      case SWITCH:
      case LLAVE_IZQ:
      case IDENTIFICADOR:{
        sentencia();
        break;
        }
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(0);
  }

  final public void Clase() throws ParseException {
logProduccion("Clase");
    try {
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case PRIVADO:
        case PROTEGIDO:
        case PUBLICO:
        case ESTATICO:{
          ;
          break;
          }
        default:
          jj_la1[2] = jj_gen;
          break label_2;
        }
        Modificador();
      }
      jj_consume_token(CLASE);
      jj_consume_token(IDENTIFICADOR);
      jj_consume_token(LLAVE_IZQ);
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case BOOLEANO:
        case CARACTER:
        case HACER:
        case DOBLE:
        case PARA:
        case SI:
        case ENTERO:
        case PRIVADO:
        case PROTEGIDO:
        case PUBLICO:
        case IMPRIMIR:
        case ESTATICO:
        case CADENA:
        case MIENTRAS:
        case SWITCH:
        case LLAVE_IZQ:
        case IDENTIFICADOR:{
          ;
          break;
          }
        default:
          jj_la1[3] = jj_gen;
          break label_3;
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case PRIVADO:
        case PROTEGIDO:
        case PUBLICO:
        case ESTATICO:{
          Metodo();
          break;
          }
        case BOOLEANO:
        case CARACTER:
        case HACER:
        case DOBLE:
        case PARA:
        case SI:
        case ENTERO:
        case IMPRIMIR:
        case CADENA:
        case MIENTRAS:
        case SWITCH:
        case LLAVE_IZQ:
        case IDENTIFICADOR:{
          sentencia();
          break;
          }
        default:
          jj_la1[4] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      jj_consume_token(LLAVE_DER);
    } catch (ParseException e) {
recuperarError(LLAVE_DER);
    } catch (TokenMgrError e) {
recuperarErrorLexico();
    }
  }

  void logProduccion(String nombreProduccion) throws ParseException {Token t = getToken(1);
    System.out.println("Entrando a " + nombreProduccion + " en l\u00ednea: " + t.beginLine + ", columna: " + t.beginColumn);
  }

  void recuperarError(int kind) throws ParseException {ParseException e = generateParseException();
         System.err.println(e.toString());
         ReporteHTML.agregarError(e.toString());
         Token t;
         do {
             t = getNextToken();
         } while (t.kind != kind && t.kind != EOF);
  }

  void recuperarErrorLexico() throws ParseException {Token t;
    do {
        t = getNextToken();
    } while (t.kind != PUNTO_COMA && t.kind != LLAVE_DER && t.kind != EOF);
  }

  final public void Modificador() throws ParseException {
logProduccion("Modificador");
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PUBLICO:{
        jj_consume_token(PUBLICO);
        break;
        }
      case PRIVADO:{
        jj_consume_token(PRIVADO);
        break;
        }
      case PROTEGIDO:{
        jj_consume_token(PROTEGIDO);
        break;
        }
      case ESTATICO:{
        jj_consume_token(ESTATICO);
        break;
        }
      default:
        jj_la1[5] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException e) {
recuperarError(PUNTO_COMA);
    } catch (TokenMgrError e) {
recuperarErrorLexico();
    }
  }

  final public void Metodo() throws ParseException {
    try {
      Modificador();
      tipo_de_dato();
      jj_consume_token(IDENTIFICADOR);
      jj_consume_token(PARENT_IZQ);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case BOOLEANO:
      case CARACTER:
      case FLOTANTE:
      case ENTERO:
      case CADENA:{
        Parametros();
        break;
        }
      default:
        jj_la1[6] = jj_gen;
        ;
      }
      jj_consume_token(PARENT_DER);
      Bloque();
    } catch (ParseException e) {
recuperarError(PARENT_DER);
    } catch (TokenMgrError e) {
recuperarErrorLexico();
    }
  }

  final public void Parametros() throws ParseException {
logProduccion("Parametros");
    try {
      tipo_de_dato();
      jj_consume_token(IDENTIFICADOR);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ARRAY_IZQ:{
        jj_consume_token(ARRAY_IZQ);
        jj_consume_token(ARRAY_DER);
        break;
        }
      default:
        jj_la1[7] = jj_gen;
        ;
      }
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case COMA:{
          ;
          break;
          }
        default:
          jj_la1[8] = jj_gen;
          break label_4;
        }
        jj_consume_token(COMA);
        tipo_de_dato();
        jj_consume_token(IDENTIFICADOR);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case ARRAY_IZQ:{
          jj_consume_token(ARRAY_IZQ);
          jj_consume_token(ARRAY_DER);
          break;
          }
        default:
          jj_la1[9] = jj_gen;
          ;
        }
      }
    } catch (ParseException e) {
recuperarError(ARRAY_DER);
    } catch (TokenMgrError e) {
recuperarErrorLexico();
    }
  }

  final public void sentencia() throws ParseException {
logProduccion("sentencia");
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case BOOLEANO:
      case CARACTER:
      case DOBLE:
      case ENTERO:
      case CADENA:{
        declaracion();
        break;
        }
      case IDENTIFICADOR:{
        asignacion();
        break;
        }
      case SI:{
        si();
        break;
        }
      case MIENTRAS:{
        mientras();
        break;
        }
      case PARA:{
        para();
        break;
        }
      case IMPRIMIR:{
        imprimir();
        break;
        }
      case PRIVADO:
      case PROTEGIDO:
      case PUBLICO:
      case ESTATICO:{
        Metodo();
        break;
        }
      case LLAVE_IZQ:{
        Bloque();
        break;
        }
      case HACER:{
        hacer();
        break;
        }
      case SWITCH:{
        seleccion();
        break;
        }
      default:
        jj_la1[10] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException e) {
recuperarError(PUNTO_COMA);
    } catch (TokenMgrError e) {
recuperarErrorLexico();
    }
  }

  final public void Bloque() throws ParseException {
logProduccion("Bloque");
    try {
      jj_consume_token(LLAVE_IZQ);
      label_5:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case BOOLEANO:
        case CARACTER:
        case HACER:
        case DOBLE:
        case PARA:
        case SI:
        case ENTERO:
        case PRIVADO:
        case PROTEGIDO:
        case PUBLICO:
        case IMPRIMIR:
        case ESTATICO:
        case CADENA:
        case MIENTRAS:
        case SWITCH:
        case LLAVE_IZQ:
        case IDENTIFICADOR:{
          ;
          break;
          }
        default:
          jj_la1[11] = jj_gen;
          break label_5;
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case BOOLEANO:
        case CARACTER:
        case DOBLE:
        case ENTERO:
        case CADENA:{
          declaracion();
          break;
          }
        case HACER:
        case PARA:
        case SI:
        case PRIVADO:
        case PROTEGIDO:
        case PUBLICO:
        case IMPRIMIR:
        case ESTATICO:
        case MIENTRAS:
        case SWITCH:
        case LLAVE_IZQ:
        case IDENTIFICADOR:{
          sentencia();
          break;
          }
        default:
          jj_la1[12] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      jj_consume_token(LLAVE_DER);
    } catch (ParseException e) {
recuperarError(LLAVE_DER);
    } catch (TokenMgrError e) {
recuperarErrorLexico();
    }
  }

  final public void asignacion() throws ParseException {Token id;
logProduccion("asignacion");
    try {
      id = jj_consume_token(IDENTIFICADOR);
      jj_consume_token(ASIGNACION);
      expresion();
      jj_consume_token(PUNTO_COMA);
// Aquí decides qué hacer. Ejemplo:
            System.out.println("Asignaci\u00f3n registrada de: " + id.image);
    } catch (ParseException e) {
recuperarError(PUNTO_COMA);
    } catch (TokenMgrError e) {
recuperarErrorLexico();
    }
  }

  final public void imprimir() throws ParseException {
logProduccion("imprimir");
    try {
      jj_consume_token(IMPRIMIR);
      jj_consume_token(PARENT_IZQ);
      expresion();
      jj_consume_token(PARENT_DER);
      jj_consume_token(PUNTO_COMA);
    } catch (ParseException e) {
recuperarError(PUNTO_COMA);
    } catch (TokenMgrError e) {
recuperarErrorLexico();
    }
  }

  final public void si() throws ParseException {
logProduccion("si");
    try {
      jj_consume_token(SI);
      jj_consume_token(PARENT_IZQ);
      expresion();
      jj_consume_token(PARENT_DER);
      cuerpo_si();
    } catch (ParseException e) {
recuperarError(PARENT_DER);
    } catch (TokenMgrError e) {
recuperarErrorLexico();
    }
  }

  final public void cuerpo_si() throws ParseException {
logProduccion("cuerpo_si");
    try {
      jj_consume_token(LLAVE_IZQ);
      label_6:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case BOOLEANO:
        case CARACTER:
        case HACER:
        case DOBLE:
        case PARA:
        case SI:
        case ENTERO:
        case PRIVADO:
        case PROTEGIDO:
        case PUBLICO:
        case IMPRIMIR:
        case ESTATICO:
        case CADENA:
        case MIENTRAS:
        case SWITCH:
        case LLAVE_IZQ:
        case IDENTIFICADOR:{
          ;
          break;
          }
        default:
          jj_la1[13] = jj_gen;
          break label_6;
        }
        sentencia();
      }
      jj_consume_token(LLAVE_DER);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case SI_NO:{
        jj_consume_token(SI_NO);
        jj_consume_token(LLAVE_IZQ);
        label_7:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case BOOLEANO:
          case CARACTER:
          case HACER:
          case DOBLE:
          case PARA:
          case SI:
          case ENTERO:
          case PRIVADO:
          case PROTEGIDO:
          case PUBLICO:
          case IMPRIMIR:
          case ESTATICO:
          case CADENA:
          case MIENTRAS:
          case SWITCH:
          case LLAVE_IZQ:
          case IDENTIFICADOR:{
            ;
            break;
            }
          default:
            jj_la1[14] = jj_gen;
            break label_7;
          }
          sentencia();
        }
        jj_consume_token(LLAVE_DER);
        break;
        }
      default:
        jj_la1[15] = jj_gen;
        ;
      }
    } catch (ParseException e) {
recuperarError(LLAVE_DER);
    } catch (TokenMgrError e) {
recuperarErrorLexico();
    }
  }

  final public void mientras() throws ParseException {
logProduccion("mientras");
    try {
      jj_consume_token(MIENTRAS);
      jj_consume_token(PARENT_IZQ);
      expresion();
      jj_consume_token(PARENT_DER);
      cuerpo_mientras();
    } catch (ParseException e) {
recuperarError(PARENT_DER);
    } catch (TokenMgrError e) {
recuperarErrorLexico();
    }
  }

  final public void cuerpo_mientras() throws ParseException {
logProduccion("cuerpo_mientras");
    try {
      jj_consume_token(LLAVE_IZQ);
      label_8:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case BOOLEANO:
        case CARACTER:
        case HACER:
        case DOBLE:
        case PARA:
        case SI:
        case ENTERO:
        case PRIVADO:
        case PROTEGIDO:
        case PUBLICO:
        case IMPRIMIR:
        case ESTATICO:
        case CADENA:
        case MIENTRAS:
        case SWITCH:
        case LLAVE_IZQ:
        case IDENTIFICADOR:{
          ;
          break;
          }
        default:
          jj_la1[16] = jj_gen;
          break label_8;
        }
        sentencia();
      }
      jj_consume_token(LLAVE_DER);
    } catch (ParseException e) {
recuperarError(LLAVE_DER);
    } catch (TokenMgrError e) {
recuperarErrorLexico();
    }
  }

  final public void para() throws ParseException {
logProduccion("para");
    try {
      jj_consume_token(PARA);
      jj_consume_token(PARENT_IZQ);
      asignacion();
      jj_consume_token(PUNTO_COMA);
      expresion();
      jj_consume_token(PUNTO_COMA);
      asignacion();
      jj_consume_token(PARENT_DER);
      cuerpo_para();
    } catch (ParseException e) {
recuperarError(PARENT_DER);
    } catch (TokenMgrError e) {
recuperarErrorLexico();
    }
  }

  final public void cuerpo_para() throws ParseException {
logProduccion("cuerpo_para");
    try {
      jj_consume_token(LLAVE_IZQ);
      label_9:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case BOOLEANO:
        case CARACTER:
        case HACER:
        case DOBLE:
        case PARA:
        case SI:
        case ENTERO:
        case PRIVADO:
        case PROTEGIDO:
        case PUBLICO:
        case IMPRIMIR:
        case ESTATICO:
        case CADENA:
        case MIENTRAS:
        case SWITCH:
        case LLAVE_IZQ:
        case IDENTIFICADOR:{
          ;
          break;
          }
        default:
          jj_la1[17] = jj_gen;
          break label_9;
        }
        sentencia();
      }
      jj_consume_token(LLAVE_DER);
    } catch (ParseException e) {
recuperarError(LLAVE_DER);
    } catch (TokenMgrError e) {
recuperarErrorLexico();
    }
  }

  final public void hacer() throws ParseException {
logProduccion("hacer");
    try {
      jj_consume_token(HACER);
      cuerpo_hacer();
      jj_consume_token(MIENTRAS);
      jj_consume_token(PARENT_IZQ);
      expresion();
      jj_consume_token(PARENT_DER);
      jj_consume_token(PUNTO_COMA);
    } catch (ParseException e) {
recuperarError(PUNTO_COMA);
    } catch (TokenMgrError e) {
recuperarErrorLexico();
    }
  }

  final public void cuerpo_hacer() throws ParseException {
logProduccion("cuerpo_hacer");
    try {
      jj_consume_token(LLAVE_IZQ);
      label_10:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case BOOLEANO:
        case CARACTER:
        case HACER:
        case DOBLE:
        case PARA:
        case SI:
        case ENTERO:
        case PRIVADO:
        case PROTEGIDO:
        case PUBLICO:
        case IMPRIMIR:
        case ESTATICO:
        case CADENA:
        case MIENTRAS:
        case SWITCH:
        case LLAVE_IZQ:
        case IDENTIFICADOR:{
          ;
          break;
          }
        default:
          jj_la1[18] = jj_gen;
          break label_10;
        }
        sentencia();
      }
      jj_consume_token(LLAVE_DER);
    } catch (ParseException e) {
recuperarError(LLAVE_DER);
    } catch (TokenMgrError e) {
recuperarErrorLexico();
    }
  }

  final public void seleccion() throws ParseException {
logProduccion("seleccion");
    try {
      jj_consume_token(SWITCH);
      jj_consume_token(PARENT_IZQ);
      expresion();
      jj_consume_token(PARENT_DER);
      jj_consume_token(LLAVE_IZQ);
      label_11:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case CASO:{
          ;
          break;
          }
        default:
          jj_la1[19] = jj_gen;
          break label_11;
        }
        jj_consume_token(CASO);
        expresion();
        jj_consume_token(DOS_PUNTOS);
        label_12:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case BOOLEANO:
          case CARACTER:
          case HACER:
          case DOBLE:
          case PARA:
          case SI:
          case ENTERO:
          case PRIVADO:
          case PROTEGIDO:
          case PUBLICO:
          case IMPRIMIR:
          case ESTATICO:
          case CADENA:
          case MIENTRAS:
          case SWITCH:
          case LLAVE_IZQ:
          case IDENTIFICADOR:{
            ;
            break;
            }
          default:
            jj_la1[20] = jj_gen;
            break label_12;
          }
          sentencia();
        }
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case DEFECTO:{
        jj_consume_token(DEFECTO);
        jj_consume_token(DOS_PUNTOS);
        label_13:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case BOOLEANO:
          case CARACTER:
          case HACER:
          case DOBLE:
          case PARA:
          case SI:
          case ENTERO:
          case PRIVADO:
          case PROTEGIDO:
          case PUBLICO:
          case IMPRIMIR:
          case ESTATICO:
          case CADENA:
          case MIENTRAS:
          case SWITCH:
          case LLAVE_IZQ:
          case IDENTIFICADOR:{
            ;
            break;
            }
          default:
            jj_la1[21] = jj_gen;
            break label_13;
          }
          sentencia();
        }
        break;
        }
      default:
        jj_la1[22] = jj_gen;
        ;
      }
      jj_consume_token(LLAVE_DER);
    } catch (ParseException e) {
recuperarError(LLAVE_DER);
    } catch (TokenMgrError e) {
recuperarErrorLexico();
    }
  }

  final public void SITUACION() throws ParseException {
    jj_consume_token(CASO);
    expresion();
    jj_consume_token(DOS_PUNTOS);
    label_14:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case BOOLEANO:
      case CARACTER:
      case HACER:
      case DOBLE:
      case PARA:
      case SI:
      case ENTERO:
      case PRIVADO:
      case PROTEGIDO:
      case PUBLICO:
      case IMPRIMIR:
      case ESTATICO:
      case CADENA:
      case MIENTRAS:
      case SWITCH:
      case LLAVE_IZQ:
      case IDENTIFICADOR:{
        ;
        break;
        }
      default:
        jj_la1[23] = jj_gen;
        break label_14;
      }
      sentencia();
    }
  }

  final public void declaracion() throws ParseException {Token tipoToken;
    Token id = null;
    int tipo = -1;
logProduccion("declaracion");
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ENTERO:{
        tipoToken = jj_consume_token(ENTERO);
tipo = 39;
        break;
        }
      case DOBLE:{
        tipoToken = jj_consume_token(DOBLE);
tipo = 26;
        break;
        }
      case CARACTER:{
        tipoToken = jj_consume_token(CARACTER);
tipo = 20;
        break;
        }
      case CADENA:{
        tipoToken = jj_consume_token(CADENA);
tipo = 57;
        break;
        }
      case BOOLEANO:{
        tipoToken = jj_consume_token(BOOLEANO);
tipo = 15;
        break;
        }
      default:
        jj_la1[24] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      id = jj_consume_token(IDENTIFICADOR);
      jj_consume_token(PUNTO_COMA);
TokenAsignaciones.InsertarSimbolo(id, tipo);
            System.out.println("inserto " + tipoToken.image + " en la tabla de simbolos: " + id.image);
    } catch (ParseException e) {
if (id != null && tipo != -1) {
            TokenAsignaciones.InsertarSimbolo(id, tipo);
            System.out.println("Registro parcial tras error: " + id.image);
        }
        recuperarError(PUNTO_COMA);
    } catch (TokenMgrError e) {
recuperarErrorLexico();
    }
  }

  final public void tipo_de_dato() throws ParseException {
logProduccion("tipo_de_dato");
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ENTERO:{
        jj_consume_token(ENTERO);
        break;
        }
      case FLOTANTE:{
        jj_consume_token(FLOTANTE);
        break;
        }
      case CADENA:{
        jj_consume_token(CADENA);
        break;
        }
      case BOOLEANO:{
        jj_consume_token(BOOLEANO);
        break;
        }
      case CARACTER:{
        jj_consume_token(CARACTER);
        break;
        }
      default:
        jj_la1[25] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException e) {
recuperarError(PUNTO_COMA);
    } catch (TokenMgrError e) {
recuperarErrorLexico();
    }
  }

  final public void expresion() throws ParseException {
logProduccion("expresion");
    try {
      operando();
      label_15:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case SUMA:
        case RESTA:
        case MULTI:
        case DIVI:
        case MODULO:
        case ASIGNACION:
        case IGUAL_QUE:
        case NO_IGUAL_QUE:
        case MENOR_QUE:
        case MAYOR_QUE:
        case MENOR_IGUAL:
        case MAYOR_IGUAL:
        case NEGACION:
        case OR:
        case AND_LOGICA:{
          ;
          break;
          }
        default:
          jj_la1[26] = jj_gen;
          break label_15;
        }
        operador();
        operando();
      }
    } catch (ParseException e) {
recuperarError(PUNTO_COMA);
    } catch (TokenMgrError e) {
recuperarErrorLexico();
    }
  }

  final public void operando() throws ParseException {
logProduccion("operando");
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IDENTIFICADOR:{
        jj_consume_token(IDENTIFICADOR);
        break;
        }
      case ENTERO_LITERAL:{
        jj_consume_token(ENTERO_LITERAL);
        break;
        }
      case CADENA_LITERAL:{
        jj_consume_token(CADENA_LITERAL);
        break;
        }
      case VERDADERO:{
        jj_consume_token(VERDADERO);
        break;
        }
      case FALSO:{
        jj_consume_token(FALSO);
        break;
        }
      case PARENT_IZQ:{
        jj_consume_token(PARENT_IZQ);
        expresion();
        jj_consume_token(PARENT_DER);
        break;
        }
      default:
        jj_la1[27] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException e) {
recuperarError(PUNTO_COMA);
    } catch (TokenMgrError e) {
recuperarErrorLexico();
    }
  }

  final public void operador() throws ParseException {
logProduccion("operador");
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case SUMA:{
        jj_consume_token(SUMA);
        break;
        }
      case RESTA:{
        jj_consume_token(RESTA);
        break;
        }
      case MULTI:{
        jj_consume_token(MULTI);
        break;
        }
      case DIVI:{
        jj_consume_token(DIVI);
        break;
        }
      case MODULO:{
        jj_consume_token(MODULO);
        break;
        }
      case IGUAL_QUE:{
        jj_consume_token(IGUAL_QUE);
        break;
        }
      case NO_IGUAL_QUE:{
        jj_consume_token(NO_IGUAL_QUE);
        break;
        }
      case MENOR_QUE:{
        jj_consume_token(MENOR_QUE);
        break;
        }
      case MAYOR_QUE:{
        jj_consume_token(MAYOR_QUE);
        break;
        }
      case MENOR_IGUAL:{
        jj_consume_token(MENOR_IGUAL);
        break;
        }
      case MAYOR_IGUAL:{
        jj_consume_token(MAYOR_IGUAL);
        break;
        }
      case AND_LOGICA:{
        jj_consume_token(AND_LOGICA);
        break;
        }
      case OR:{
        jj_consume_token(OR);
        break;
        }
      case NEGACION:{
        jj_consume_token(NEGACION);
        break;
        }
      case ASIGNACION:{
        jj_consume_token(ASIGNACION);
        break;
        }
      default:
        jj_la1[28] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException e) {
recuperarError(PUNTO_COMA);
    } catch (TokenMgrError e) {
recuperarErrorLexico();
    }
  }

  /** Generated Token Manager. */
  public GramaticaTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[29];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static private int[] jj_la1_3;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
      jj_la1_init_3();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x6308000,0x6308000,0x0,0x6108000,0x6108000,0x0,0x108000,0x0,0x0,0x0,0x6108000,0x6108000,0x6108000,0x6108000,0x6108000,0x8000000,0x6108000,0x6108000,0x6108000,0x40000,0x6108000,0x6108000,0x0,0x6108000,0x4108000,0x108000,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x147808a,0x147808a,0x438000,0x147808a,0x147808a,0x438000,0x1000081,0x0,0x0,0x0,0x147808a,0x147808a,0x147808a,0x147808a,0x147808a,0x0,0x147808a,0x147808a,0x147808a,0x0,0x147808a,0x147808a,0x0,0x147808a,0x1000080,0x1000081,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x200060,0x200060,0x0,0x200060,0x200060,0x0,0x0,0x2000000,0x20000000,0x2000000,0x200060,0x200060,0x200060,0x200060,0x200060,0x0,0x200060,0x200060,0x200060,0x0,0x200060,0x200060,0x80,0x200060,0x0,0x0,0x80000000,0x8c0000,0x80000000,};
   }
   private static void jj_la1_init_3() {
      jj_la1_3 = new int[] {0x8000000,0x8000000,0x0,0x8000000,0x8000000,0x0,0x0,0x0,0x0,0x0,0x8000000,0x8000000,0x8000000,0x8000000,0x8000000,0x0,0x8000000,0x8000000,0x8000000,0x0,0x8000000,0x8000000,0x0,0x8000000,0x0,0x0,0x11fe01f,0x38000000,0x11fe01f,};
   }

  /** Constructor with InputStream. */
  public Gramatica(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Gramatica(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new GramaticaTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 29; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 29; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Gramatica(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new GramaticaTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 29; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 29; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Gramatica(GramaticaTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 29; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(GramaticaTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 29; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk_f() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[126];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 29; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
          if ((jj_la1_3[i] & (1<<j)) != 0) {
            la1tokens[96+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 126; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
